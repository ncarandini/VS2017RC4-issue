@*@using System.Globalization;*@

<environment names="Development">
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
    <script src="~/lib/cldrjs/dist/cldr.js"></script>
    <script src="~/lib/cldrjs/dist/cldr/event.js"></script>
    <script src="~/lib/cldrjs/dist/cldr/supplemental.js"></script>
    <script src="~/lib/globalize/dist/globalize.js"></script>
    <script src="~/lib/globalize/dist/globalize/number.js"></script>
    <script src="~/lib/globalize/dist/globalize/plural.js"></script>
    <script src="~/lib/globalize/dist/globalize/currency.js"></script>
    <script src="~/lib/globalize/dist/globalize/date.js"></script>
    <script src="~/lib/globalize/dist/globalize/message.js"></script>
    <script src="~/lib/globalize/dist/globalize/relative-time.js"></script>
    <script src="~/lib/globalize/dist/globalize/unit.js"></script>
</environment>

<environment names="Staging,Production">
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.14.0/jquery.validate.min.js"
            asp-fallback-src="~/lib/jquery-validation/dist/jquery.validate.min.js"
            asp-fallback-test="window.jQuery && window.jQuery.validator">
    </script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validation.unobtrusive/3.2.6/jquery.validate.unobtrusive.min.js"
            asp-fallback-src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"
            asp-fallback-test="window.jQuery && window.jQuery.validator && window.jQuery.validator.unobtrusive">
    </script>
</environment>

<script>
      @{
          var locale = "it"; // CultureInfo.CurrentCulture.TwoLetterISOLanguageName;
      }

    $(function () {
        $.when(
          $.get('@Url.Content("~/cldr/supplemental/likelySubtags.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content($"~/cldr/main/{locale}/numbers.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content("~/cldr/supplemental/numberingSystems.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content("~/cldr/supplemental/plurals.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content("~/cldr/supplemental/ordinals.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content($"~/cldr/main/{locale}/currencies.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content("~/cldr/supplemental/currencyData.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content($"~/cldr/main/{locale}/ca-gregorian.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content($"~/cldr/main/{locale}/timeZoneNames.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content("~/cldr/supplemental/timeData.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content("~/cldr/supplemental/weekData.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content($"~/cldr/main/{locale}/dateFields.json")')
            .success(function (data) { Globalize.load(data); }),
          $.get('@Url.Content($"~/cldr/main/{locale}/units.json")')
            .success(function (data) { Globalize.load(data); })
          ).then(function () {
              Globalize.locale('@locale');
          });
    })
</script>

<script>
    (function ($, Globalize) {
        if (!$.validator) {
            return;
        }

        // Clone original methods we want to call into
        var originalMethods = {
            min: $.validator.methods.min,
            max: $.validator.methods.max,
            range: $.validator.methods.range
        };

        // Globalize options - initially just the date format used for parsing
        // Users can customise this to suit them
        $.validator.methods.dateGlobalizeOptions = {
          dateParseFormat: { skeleton: "yMd" }
        };

        // Tell the validator that we want numbers parsed using Globalize
        $.validator.methods.number = function (value, element) {
            var val = Globalize.parseNumber(value);
            return this.optional(element) || ($.isNumeric(val));
        };

        // Tell the validator that we want dates parsed using Globalize

        // 2017-01-25 modified by n.carandini
        $.validator.methods.date = function (value, element) {
            // set value to the localized text of the date,
            // from the date ISO value that a field of type "Data"
            // value property returns
            if (element.type === "date") {
                value = new Date(value).toLocaleDateString();
            }

            val = Globalize.parseDate(value,
                $.validator.methods.dateGlobalizeOptions.dateParseFormat);

            return this.optional(element) || !/Invalid|NaN/.test(new Date(val).toString());
        };

        // Old version
        //$.validator.methods.date = function (value, element) {
        //    val = Globalize.parseDate(value,
        //        $.validator.methods.dateGlobalizeOptions.dateParseFormat);

        //    return this.optional(element) || (val instanceof Date);
        //};

        // Tell the validator that we want numbers parsed using Globalize,
        // then call into original implementation with parsed value

        $.validator.methods.min = function (value, element, param) {
            var val = Globalize.parseNumber(value);
            return originalMethods.min.call(this, val, element, param);
        };

        $.validator.methods.max = function (value, element, param) {
            var val = Globalize.parseNumber(value);
            return originalMethods.max.call(this, val, element, param);
        };

        // 2017-01-26 modified by n.carandini
        $.validator.methods.range = function (value, element, param) {
            var val;
            if (element.type === "date") {
                val = new Date(value).getTime();
            }
            else
            {
                val = Globalize.parseNumber(value);
            }
            return originalMethods.range.call(this, val, element, param);
        };

        // Old version
        //$.validator.methods.range = function (value, element, param) {
        //    var val = Globalize.parseNumber(value);
        //    return originalMethods.range.call(this, val, element, param);
        //};

    }(jQuery, Globalize));
</script>
